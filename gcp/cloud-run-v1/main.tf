
# Resource configuration for deploying a Google Cloud Run service
resource "google_cloud_run_service" "default" {
  name                       = var.name           # Service name
  provider                   = google-beta        # Using the beta provider
  location                   = var.project_region # Deployment location
  project                    = var.project_id     # GCP project ID
  autogenerate_revision_name = true               # Enable autogenerated revision names

  # Container template definition
  template {
    spec {
      containers {
        image = "gcr.io/cloudrun/hello" # Container image path
      }
      service_account_name = try(var.cloud_run_service_account, null) # Service account for running the service
    }
    metadata {
      annotations = {
        "autoscaling.knative.dev/minScale"        = "1"                                                           # Autoscaling configuration
        "run.googleapis.com/cloudsql-instances"   = try(var.sql_connection, null)                                 # Cloud SQL connection details
        "run.googleapis.com/vpc-access-connector" = try(var.sharedVpcConnector, null)                             # VPC Connector details
        "run.googleapis.com/vpc-access-egress"    = var.sharedVpcConnector != null ? "private-ranges-only" : null # VPC Egress rules
      }
    }
  }
  # Traffic configuration
  traffic {
    percent         = 100  # Percent of traffic to the latest revision
    latest_revision = true # Always route to the latest revision
  }

  # Lifecycle rules to ignore certain changes
  lifecycle {
    ignore_changes = [
      # Ignore changes to container images and specific annotations (e.g., for cloud build deployment)
      template[0].spec[0].containers[0],
      template[0].metadata[0].annotations["autoscaling.knative.dev/maxScale"],
      template[0].metadata[0].annotations["run.googleapis.com/client-name"],
      template[0].metadata[0].annotations["run.googleapis.com/client-version"],
      template[0].metadata[0].annotations["client.knative.dev/user-image"],
    ]
  }
}

# Resource to allow public access to the Cloud Run service
resource "google_cloud_run_service_iam_binding" "noauth" {
  count = var.allow_public_access == true ? 1 : 0 # Conditionally create based on public access flag

  location = google_cloud_run_service.default.location
  project  = google_cloud_run_service.default.project
  service  = google_cloud_run_service.default.name
  role     = "roles/run.invoker" # Role for invoking the service
  members  = ["allUsers"]        # Allow all users
}

# Network Endpoint Group (NEG) for Cloud Run service
resource "google_compute_region_network_endpoint_group" "cloudrun_neg" {
  name                  = "${var.name}-neg"
  network_endpoint_type = "SERVERLESS"       # Serverless NEG
  region                = var.project_region # Region
  cloud_run {
    service = google_cloud_run_service.default.name # Associated Cloud Run service
  }
}

# Load Balancer module using serverless NEGs
module "lb-http" {
  source  = "GoogleCloudPlatform/lb-http/google//modules/serverless_negs"
  project = var.project_id
  name    = "${var.name}-lb"
  version = "6.3.0"

  # SSL and domain configuration
  managed_ssl_certificate_domains = var.domains != null ? var.domains : []
  ssl                             = var.domains != null ? true : false
  https_redirect                  = true # Enable HTTPS redirect
  random_certificate_suffix       = true

  backends = {
    default = {
      # List your serverless NEGs, VMs, or buckets as backends
      groups = [
        {
          group = google_compute_region_network_endpoint_group.cloudrun_neg.id
        }
      ]

      description             = null
      enable_cdn              = true
      custom_request_headers  = ["X-Client-Geo-Location: {client_region_subdivision}, {client_city}"]
      custom_response_headers = ["X-Cache-Hit: {cdn_cache_status}"]
      security_policy         = null

      log_config = {
        enable      = true
        sample_rate = 1.0
      }

      iap_config = {
        enable               = false
        oauth2_client_id     = null
        oauth2_client_secret = null
      }
    }
  }
}

# Cloud Build trigger configuration
module "trigger_provision" {
  count        = var.create_trigger == true ? 1 : 0
  source       = "../cloud-cloudbuild-trigger"
  name         = "service-${var.name}-provision"
  description  = "Provision ${var.name} Service (CI/CD)"
  filename     = "services/${var.name}/cloudbuild.yaml"
  include      = ["services/${var.name}/**"]
  exclude      = ["services/${var.name}/functions/**"]
  branch       = var.branching_strategy.provision.branch
  invert_regex = var.branching_strategy.provision.invert_regex
  # Substitution variables for Cloud Build
  substitutions = {
    _STAGE                    = "provision"
    _BUILD_ENV                = var.environment
    _SERVICE_NAME             = var.name
    _DOCKER_ARTIFACT_REGISTRY = var.artifact_repository
    _SERVICE_PATH             = "services/${var.name}"
    _LOCATION                 = var.project_region
    _SERVICE_ACCOUNT          = var.cloud_run_service_account
  }
}
