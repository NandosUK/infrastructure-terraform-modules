resource "google_organization_iam_custom_role" "wiz_security_role" {
  role_id     = var.wiz_security_role_name
  org_id      = var.org_id
  title       = var.wiz_security_role_name
  permissions = var.least_privilege_policy ? flatten([local.LEAST_PRIVILEGE_ROLE_PERMISSIONS, local.ORG_RESOURCE_MANAGER_ROLES, local.FOLDER_RESOURCE_MANAGER_ROLES, local.PROJECT_RESOURCE_MANAGER_ROLES]) : local.ROLE_PERMISSIONS
}

resource "google_organization_iam_member" "fetcher_roles" {
  for_each   = local.fetcher_roles
  org_id     = var.org_id
  role       = each.value
  member     = "serviceAccount:${local.fetcher_service_account_id}"
  depends_on = [google_organization_iam_custom_role.wiz_security_role]
}

locals {
  ROLE_PERMISSIONS = [
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "storage.buckets.get",
    "storage.objects.get"
  ]
  LEAST_PRIVILEGE_ROLE_PERMISSIONS = [
    "accessapproval.settings.get",
    "aiplatform.customJobs.list",
    "aiplatform.datasets.list",
    "aiplatform.endpoints.list",
    "aiplatform.hyperparameterTuningJobs.list",
    "aiplatform.models.list",
    "aiplatform.pipelineJobs.list",
    "aiplatform.trainingPipelines.list",
    "alloydb.backups.list",
    "alloydb.clusters.list",
    "alloydb.instances.list",
    "apikeys.keys.list",
    "appengine.applications.get",
    "appengine.services.list",
    "artifactregistry.locations.get",
    "artifactregistry.locations.list",
    "artifactregistry.packages.get",
    "artifactregistry.packages.list",
    "artifactregistry.repositories.downloadArtifacts",
    "artifactregistry.repositories.get",
    "artifactregistry.repositories.list",
    "artifactregistry.versions.get",
    "artifactregistry.versions.list",
    "bigquery.datasets.get",
    "bigquery.transfers.get",
    "bigtable.backups.list",
    "bigtable.clusters.list",
    "bigtable.instances.getIamPolicy",
    "bigtable.instances.list",
    "certificatemanager.certs.list",
    "cloudasset.assets.listResource",
    "cloudfunctions.functions.get",
    "cloudfunctions.functions.getIamPolicy",
    "cloudfunctions.functions.list",
    "cloudkms.cryptoKeys.getIamPolicy",
    "cloudkms.cryptoKeys.list",
    "cloudkms.keyRings.getIamPolicy",
    "cloudkms.keyRings.list",
    "cloudsql.databases.list",
    "cloudsql.instances.get",
    "cloudsql.instances.list",
    "cloudsql.users.get",
    "cloudsql.users.list",
    "composer.environments.list",
    "compute.addresses.list",
    "compute.backendBuckets.list",
    "compute.backendServices.list",
    "compute.disks.get",
    "compute.disks.getIamPolicy",
    "compute.disks.list",
    "compute.externalVpnGateways.list",
    "compute.firewalls.list",
    "compute.forwardingRules.list",
    "compute.globalNetworkEndpointGroups.get",
    "compute.images.get",
    "compute.images.getIamPolicy",
    "compute.instanceGroupManagers.list",
    "compute.instanceGroups.list",
    "compute.instanceTemplates.list",
    "compute.instances.get",
    "compute.instances.getIamPolicy",
    "compute.instances.list",
    "compute.machineTypes.get",
    "compute.machineTypes.list",
    "compute.networkEndpointGroups.get",
    "compute.networkEndpointGroups.list",
    "compute.networks.list",
    "compute.projects.get",
    "compute.regionBackendServices.list",
    "compute.regionNetworkEndpointGroups.get",
    "compute.regions.list",
    "compute.routers.list",
    "compute.routes.list",
    "compute.securityPolicies.list",
    "compute.snapshots.list",
    "compute.sslCertificates.list",
    "compute.sslPolicies.list",
    "compute.subnetworks.list",
    "compute.targetHttpProxies.list",
    "compute.targetHttpsProxies.list",
    "compute.targetPools.list",
    "compute.targetSslProxies.list",
    "compute.targetTcpProxies.list",
    "compute.targetVpnGateways.list",
    "compute.urlMaps.get",
    "compute.urlMaps.list",
    "compute.vpnGateways.list",
    "container.clusters.list",
    "datapipelines.pipelines.list",
    "dataproc.clusters.getIamPolicy",
    "dataproc.clusters.list",
    "datastore.databases.list",
    "dlp.jobTriggers.list",
    "dns.managedZones.list",
    "dns.resourceRecordSets.list",
    "dns.responsePolicies.get",
    "dns.responsePolicies.list",
    "essentialcontacts.contacts.list",
    "file.instances.list",
    "firebaserules.rulesets.get",
    "firebaserules.rulesets.list",
    "iam.roles.get",
    "iam.roles.list",
    "iam.serviceAccountKeys.list",
    "iam.serviceAccounts.getIamPolicy",
    "iam.serviceAccounts.list",
    "iam.workloadIdentityPoolProviders.list",
    "iam.workloadIdentityPools.list",
    "logging.logMetrics.list",
    "logging.sinks.list",
    "memcache.instances.list",
    "memcache.locations.list",
    "notebooks.instances.list",
    "notebooks.locations.list",
    "notebooks.runtimes.list",
    "orgpolicy.policies.list",
    "orgpolicy.policy.get",
    "policyanalyzer.serviceAccountKeyLastAuthenticationActivities.query",
    "policyanalyzer.serviceAccountLastAuthenticationActivities.query",
    "pubsub.subscriptions.getIamPolicy",
    "pubsub.subscriptions.list",
    "pubsub.topics.list",
    "recommender.iamPolicyInsights.list",
    "recommender.iamPolicyRecommendations.get",
    "recommender.iamPolicyRecommendations.list",
    "recommender.iamServiceAccountInsights.list",
    "redis.instances.list",
    "redis.locations.list",
    "resourcemanager.tagKeys.list",
    "run.revisions.get",
    "run.services.get",
    "run.services.getIamPolicy",
    "run.services.list",
    "secretmanager.secrets.list",
    "securitycenter.findings.list",
    "servicemanagement.services.get",
    "servicemanagement.services.list",
    "serviceusage.services.list",
    "spanner.databases.getIamPolicy",
    "spanner.databases.list",
    "spanner.instances.getIamPolicy",
    "spanner.instances.list",
    "storage.buckets.getIamPolicy",
    "storage.buckets.list"
  ]
  ORG_RESOURCE_MANAGER_ROLES = [
    "resourcemanager.organizations.get",
    "resourcemanager.organizations.getIamPolicy"
  ]
  FOLDER_RESOURCE_MANAGER_ROLES = [
    "accesscontextmanager.policies.list",
    "accesscontextmanager.servicePerimeters.list",
    "resourcemanager.folders.get",
    "resourcemanager.folders.getIamPolicy",
    "resourcemanager.folders.list"
  ]
  PROJECT_RESOURCE_MANAGER_ROLES = [
    "resourcemanager.projects.get",
    "resourcemanager.projects.getIamPolicy",
    "resourcemanager.projects.list",
    "resourcemanager.tagKeys.list"
  ]
}
